<%= labelled_form_for(@setting) do |f| %>
<% if @setting.errors.any? %>
  <div id="errorExplanation">
    <ul>
    <% @setting.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
<% end %>

<div id="support_setting_form">
  <div class="splitcontentleft">
    <fieldset class="box tabular">
      <legend>Information</legend>
        <p>
          <%= f.text_field :name, :required => true %>
        </p>
        <p>
          <%= f.text_field :to_email_address, :required => true %>
        </p>

        <p>
          <%= f.text_field :from_email_address, :required => true %>
        </p>
        <p>
          <label for="new_status_id">
            Status for created issue
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:new_status_id, @statuses, :id, :name, :required => true) %>
        </p>
        <p>
          <label for="priority_id">
            Priority for created issue
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:priority_id, @priorities, :id, :name, :required => true) %>
        </p>
        <p>
          <label for="project_id">
            Default Project
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:project_id, @projects, :id, :name) %>
          <em class="info">
            If an email domain custom field is specified, this project will be used as the default project if the sender email address cannot be matched to any other project.
          </em>
        </p>
        <p>
          <label for="email_domain_custom_field_id">
            Email domain custom field
          </label>
          <%= f.collection_select(:email_domain_custom_field_id, @project_custom_fields, :id, :name, {:include_blank => true}) %>
          <em class="info">
            This is the custom project field where the domain name of the email will be matched from. This field should contain the domain name only, rather than a full email address, eg:<br />
            redmine.org
          </em>
        </p>
        <p>
          <label for="tracker_id">
            Tracker
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:tracker_id, @trackers, :id, :name) %>
        </p>
        <p>
          <label for="assignee_group_id">
            User or group to assign to
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:assignee_group_id, @groups_users, :id, :name) %>
        </p>
        <p>
          <label for="author_id">
            Issue author
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:author_id, @users, :id, :name) %>
        </p>
        <p>
          <label for="reply_email_custom_field_id">
            Reply email custom field
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:reply_email_custom_field_id, @issue_custom_fields, :id, :name) %>
          <em class="info">
            This is a custom issue field where the sender's email address will be stored for information and to send creation, closed and user question emails back to the support user.
          </em>
        </p>
        <p>
          <label for="type_custom_field_id">
            Support type custom field
            <span class="required"> *</span>
          </label>
          <%= f.collection_select(:type_custom_field_id, @issue_custom_fields, :id, :name) %>
          <em class="info">
            This is a custom issue field the support setting name is populated so you know which support setting created it, and which type of support the issue belongs to.
          </em>
        </p>
        <p>
          <%= f.check_box(:active) %>
        </p>
      </fieldset>
    </div>
    <div class="splitcontentright">
      <fieldset class="box tabular">
        <legend>Emails</legend>
          <p>
            <%= f.select(:created_template_name, @template_files, :required => true) %>
          </p>
          <p>
            <%= f.check_box(:send_created_email_to_user) %>
          </p>
          <p>
            <%= f.select(:closed_template_name, @template_files, :required => true) %>
          </p>
          <p>
            <%= f.check_box(:send_closed_email_to_user) %>
          </p>
          <p>
            <%= f.select(:question_template_name, @template_files, :required => true) %>
          </p>
        </fieldset>
      </div>
      <div class="splitcontentright">
      <fieldset class="box tabular">
        <legend>Exclusions</legend>
          <p>
          <%= f.text_area :domains_to_ignore, :rows => 4, :cols => 29 %>
          <em class="info">
            You can specify a semi-colon separated list of regular expressions that will be checked against the emails from address. If any of the expressios match, the email will be ignored and deleted.
          </em>
        </p>
        <p>
          <%= f.text_area :subject_exclusion_list, :rows => 4, :cols => 29 %>
          <em class="info">
            You can specify a semi-colon separated list of regular expressions to be checked against the email's subject. If the subject matches the email will ignored and deleted.
          </em>
        </p>
        </fieldset>
      </div>
      <div class="splitcontentright">
      <fieldset class="box tabular">
        <legend>Options</legend>
          <p>
            <%= f.check_box(:reply_all_for_outgoing) %>
            <em class="info">
              If this is checked, all email addresses in the incoming email will be added to the reply email address fields, so that all recipients are replied to with ticket creation and any other redmine emails.
            </em>
          </p>
          <p>
            <%= f.text_field :bcc_email %>
            <em class="info">
              You can have all emails that are sent out by Support Helpdesk be blind carbon copied to this email address. Leave blank if you dont want this feature.
            </em>
          </p>
          <p>
            <%= f.check_box :search_in_to %>
            <%=h "To" %>
            <%= f.check_box :search_in_cc %>
            <%=h "Cc" %>
          </p>
        </fieldset>
      </div>
    </div>
    <div style="clear:left;"></div>
      <p>
        <%= f.submit "Save" %>
      </p>
<% end %>
